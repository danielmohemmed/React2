name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install
    
      - name: Run tests and generate coverage report
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4

      - name: Build
        run: npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./dist  # Replace with your build output directory
          publish_branch: gh-pages

      - name: Zip the build directory
        run: zip -r web-app.zip dist

      - name: Verify zip file creation
        run: |
          echo "Contents of current directory:"
          ls -l
          echo "Contents of zip file:"
          unzip -l web-app.zip

      - name: Create GitHub release
        id: create_release
        continue-on-error: true  # Continue on error to handle release already exists scenario
        run: |
          echo "Creating GitHub release..."
          release_response=$(curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{"tag_name": "v1.0.0", "name": "Release v1.0.0", "body": "Release of web app"}')

          echo "GitHub release creation response: $release_response"

          if [[ $(echo "$release_response" | jq -r '.errors[0].code') == "already_exists" ]]; then
            echo "Release with tag 'v1.0.0' already exists. Skipping creation."
            exit 0
          fi

          release_id=$(echo $release_response | jq -r '.id')

          if [ -z "$release_id" ]; then
            echo "Error: Failed to create GitHub release"
            exit 1
          fi

          echo "GitHub release created with ID: $release_id"
          echo "::set-output name=release_id::$release_id"

      - name: Get release download URL
        if: steps.create_release.outputs.release_id != null
        id: release_download
        run: |
          download_url=$(curl -sS \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.release_id }}/assets \
            | jq -r '.assets[0].browser_download_url')

          echo "Download URL for release: $download_url"
          echo "::set-output name=download_url::$download_url"

      - name: Create release in App Center
        if: steps.release_download.outputs.download_url != null
        run: |
          echo "Creating release in App Center..."

          if [ -z "${{ steps.release_download.outputs.download_url }}" ]; then
            echo "Error: download_url is empty"
            exit 1
          fi

          release_response=$(curl -X POST \
            -H "Content-Type: application/json" \
            -H "X-API-Token: $APP_CENTER_API_TOKEN" \
            -d "{
              \"external_download_url\": \"${{ steps.release_download.outputs.download_url }}\",
              \"build_version\": \"1.0.0\"
            }" \
            https://api.appcenter.ms/v0.1/apps/$APP_OWNER_NAME/$APP_NAME/releases)

          release_id=$(echo $release_response | jq -r '.id')

          if [ -z "$release_id" ]; then
            echo "Error: Failed to create release in App Center"
            exit 1
          fi

          echo "Release created successfully in App Center with ID: $release_id"
